from tensorflow.keras import layers, models

def build_deprnet(input_shape=(19, 1024, 1)):
    inp = layers.Input(shape=input_shape)
    x = layers.Permute((2,1,3))(inp)        # (time, channel, 1)
    x = layers.Reshape((1024, 19))(x)       # (time, channel)
    x = layers.Conv1D(128, 5, padding='same')(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU()(x)
    x = layers.MaxPooling1D(2)(x)
    x = layers.Conv1D(64, 5, padding='same')(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU()(x)
    x = layers.MaxPooling1D(2)(x)
    x = layers.Conv1D(32, 5, padding='same')(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU()(x)
    x = layers.MaxPooling1D(2)(x)
    x = layers.Conv1D(32, 3, padding='same')(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU()(x)
    x = layers.MaxPooling1D(2)(x)
    x = layers.Conv1D(32, 2, padding='same')(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU()(x)
    x = layers.MaxPooling1D(2)(x)
    x = layers.Flatten()(x)
    x = layers.Dense(16)(x)
    x = layers.LeakyReLU()(x)
    x = layers.Dense(8)(x)
    x = layers.LeakyReLU()(x)
    out = layers.Dense(2, activation='softmax')(x)
    return models.Model(inputs=inp, outputs=out)